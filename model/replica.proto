syntax = "proto3";
option java_package = "sidewalklabs.model.replica";

package replica;

import "google/protobuf/timestamp.proto";
import "map_types.proto";
import "sociodemographics.proto";

// Every Replica output is a table of PersonActivitySegment.
// Each record is unique to a single Travel Segment belonging to a single Activity
// connected to a single Person.
message PersonActivitySegment {
  Activity activity = 1;
  Person person = 2;
  TravelSegment travel_segment = 3;
  Household household = 4;
  Tour activity_tour = 5;
}

// Location of an Activity.
message Place {
  string id = 1; // TODO: Revisit whether we want these to be GUIDs instead of 64 bit ints
  string name = 2;
  map_types.Coordinate location = 3;
  ActivityType.ActivityTypeEnum primary_activity_type = 4;
  string primary_geo_unit_id = 5;
  repeated map_types.GeoUnit geo_units = 6;
}

message ActivityType {
  enum ActivityTypeEnum {
    OTHER_ACTIVITY_TYPE = 0;
    HOME = 1;
    WORK = 2;
    SCHOOL = 3;
    EAT = 4;
    SHOP = 5;
    SOCIAL = 6;
    RECREATION = 7;
    MAINTENANCE = 8; // Personal (e.g. workout, walking the dog).
    TRAVEL = 9; // Move to location for next activity.
    STAGE = 10; // Transfer between activities (e.g. waiting for bus).
    FACILITATE = 11; // Facilitate another's activity (e.g. escort, pick-up, drop-off).
    LODGING = 12; // Tourist/visitor staying in lodging
    REGION_ARRIVAL = 13; // e.g. Tourist arrived at the airport/train
    REGION_DEPARTURE = 14; // e.g. Tourist leaving from airport/train
    COMMERCIAL = 15;
  }
}

// Activity pattern types.
message TourType {
  enum TourTypeEnum {
    OTHER_TOUR_TYPE = 0;
    COMMUTE = 1; // e.g. Home -> Work -> Home.
    WORK_BASED = 2; // e.g. Work -> Eat -> Work.
    OTHER_HOME_BASED = 3; // e.g. Home -> Social -> Home.
    UNDIRECTED = 4; // e.g. Home -> Travel -> Home.
  }
}

// A collection of Activities that start and end at home or work.
// Activities can belong to multiple tours.
message Tour {
  string id = 1;
  string person_id = 2;
  TourType.TourTypeEnum type = 3;
  repeated string activity_ids = 4; // Ordered sequence of activities.
}

// An individual's role in a household.
message FamilyStructure {
  enum FamilyStructureEnum {
    UNKNOWN_FAMILY_STRUCTURE = 0;
    MARRIED_COUPLE = 1;
    SINGLE_FAMILY = 2;
    NON_FAMILY_SINGLE = 3;
    LIVING_ALONE = 4;
  }
}

// A group of people who share a physical dwelling.
message Household {
  reserved 4 to 5, 7, 8, 11;
  string id = 1;
  repeated string person_ids = 2;
  int64 income = 3;
  Place housing_unit = 6;
  FamilyStructure.FamilyStructureEnum family_structure = 9;
  sociodemographics.NumVehicles.NumVehiclesEnum num_vehicles = 10;
  repeated Vehicle vehicles = 12;
}

// An individual's role in a household.
message HouseholdRole {
  enum HouseholdRoleEnum {
    UNKNOWN_HOUSEHOLD_ROLE = 0;
    HEAD_OF_HOUSEHOLD = 1;
    SPOUSE = 2;
    CHILD = 3;
    RELATIVE = 4;
    NON_RELATIVE = 5;
  }
}

// An individual member of a Household.
message Person {
  reserved 7, 9, 15;
  string id = 1;
  int32 age = 2;
  sociodemographics.Sex.SexEnum sex = 3;
  Household household = 4; // TODO: Deprecate in favor of household_id
  string name = 5;
  sociodemographics.Employment.EmploymentEnum employment = 6;
  int64 income = 8;
  sociodemographics.Race.RaceEnum race = 10;
  Place office_unit = 11;
  TravelMode.TravelModeEnum commute_mode = 12;
  HouseholdRole.HouseholdRoleEnum household_role = 13;
  sociodemographics.Ethnicity.EthnicityEnum ethnicity = 14;
  bool is_student = 16;
  bool is_commercial = 17; // freight vehicle driver
  ResidentType.ResidentTypeEnum resident_type = 18;
  sociodemographics.HasAccessToVehicle.HasAccessToVehicleEnum has_access_to_vehicle = 19;
  string household_id = 20;
}

message ResidentType {
  enum ResidentTypeEnum {
    OTHER_RESIDENT_TYPE = 0;
    CORE = 1; // home is in the core
    DONUT = 2; // home is in the donut (may work in the core)
    VISITOR = 3; // home is out of the core+donut area
  }
}

// Metadata on an individual Network Links traversed in a Travel Segment
message TravelSegmentNetworkLink {
  NetworkLink network_link = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
}

// Physical infrastructure over which Travel Segments traverse.
message NetworkLink {
  string id = 1;
  repeated TravelMode.TravelModeEnum travel_modes = 2;
  repeated map_types.Coordinate path = 3;
}

// Means of transportation of a travel Activity.
message TravelMode {
  enum TravelModeEnum {
    OTHER_TRAVEL_MODE = 0;
    WALKING = 1;
    BIKING = 2;
    PUBLIC_TRANSIT = 3;
    PRIVATE_TRANSIT = 4; // fixed route, like Google bus or Chariot.
    ON_DEMAND_AUTO = 5; // e.g. taxi, ride-sharing service.
    PRIVATE_AUTO = 6;
    CARPOOL = 7;
    COMMERCIAL = 8;
  }
}

// Something one or more Persons spend time doing.
message Activity {
  string id = 1;
  // The type of the activity. The type of a travel activity is always "TRAVEL."
  // For a travel activity, `travel_purpose` is the activity type of the following stationary activity.
  ActivityType.ActivityTypeEnum type = 2;
  ActivityType.ActivityTypeEnum travel_purpose = 3; // Reason person is travelling.
  repeated Person persons = 4; // TODO: Deprecate in favor of person_id
  Place start_place = 5;
  google.protobuf.Timestamp start_time = 6;
  Place end_place = 7;
  google.protobuf.Timestamp end_time = 8;
  string option_set_id = 9; // ID of the set of options for this activitiy.
  OptionIndex.OptionIndexEnum option_index = 10;
  float option_score = 11; // Quality of travel choice on a scale of zero (bad) to one (good).
  TravelMode.TravelModeEnum primary_travel_mode = 12;
  repeated Tour tours = 13;
  repeated TravelSegment travel_segments = 14; // Required for travel activities.
  double distance_meters = 15; // Total distance traveled for travel activity.
  ActivityType.ActivityTypeEnum previous_activity_type = 16; // activity type prior to this activity
  bool is_captive = 17; // if a travel activity primary mode is captive (for calibration)
  bool is_synthetic_short = 18; // if an activity is a synthetic short trip (for calibration)
  string person_id = 19;
}

message RoutePlan {
  enum RoutePlanEnum {
    UNKNOWN_ROUTE_PLAN = 0;
    FIXED = 1; // Traveler's vehicle is on a fixed route.
    DIRECT = 2; // Traveler takes a more-or-less direct path to destination.
    SEARCH = 3; // Traveler is searching for a suitable destination (e.g. parking space).
  }
}

// Transit Route Types: Describes the type of transportation used on a route.
// Generally follows GTFS specification for route types, with unknown type.
// Reference: https://developers.google.com/transit/gtfs/reference/#routestxt
message TransitRouteType {
  enum TransitRouteTypeEnum {
    UNKNOWN_TRANSIT_ROUTE_TYPE = 0;
    LIGHT_RAIL = 1; // Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
    SUBWAY = 2; // Subway, Metro. Any underground rail system within a metropolitan area.
    RAIL = 3; // Rail. Used for intercity or long-distance travel.
    BUS = 4; // Bus. Used for short- and long-distance bus routes.
    FERRY = 5; // Ferry. Used for short- and long-distance boat service.
    CABLE_CAR = 6; // Cable car. Used for street-level cable cars where the cable runs beneath the car.
    GONDOLA = 7; // Gondola, Suspended cable car. Typically used for aerial cable cars where the car is suspended from the cable.
    FUNICULAR = 8; // Funicular. Any rail system designed for steep inclines.
  }
}

// Public transportation service operating on a fixed route
message TransitRoute {
  string id = 1; // e.g. 23. This ID is unique per GTFS dataset; i.e. unique per operator.
  string line = 2; // e.g. Main Street MAX
  string operator = 3; // e.g. KCATA
  string direction = 4; // e.g. FROM 3rd & Grand TO 74th Terrace & Broadway
  TransitRouteType.TransitRouteTypeEnum type = 5;
}

// A TravelSegment is a part of a journey that occurs on a single mode of transportation (walking,
// bus, subway, driving, etc). Switching transit lines within the same mode also counts as a
// different TravelSegment.
// ex. A journey that includes walking, taking the #5 bus, taking the #7 bus, and then walking to
// the destination constitutes 4 TravelSegments.
message TravelSegment {
  reserved 6 to 9;
  string id = 1;
  TravelMode.TravelModeEnum mode = 2;
  RoutePlan.RoutePlanEnum route_plan = 3;
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  Place start_place = 10; // i.e. transit stop or an origin of travel on the network
  Place end_place = 11; // i.e. transit stop or a destination of travel on the network
  // the transit route this TravelSegment occurred on; only applicable to transit
  TransitRoute transit_route = 12;
  repeated TravelSegmentNetworkLink travel_segment_network_links = 13;
  double distance_meters = 14;
  double duration_seconds = 15;
  double delay_seconds = 16;
  Vehicle vehicle = 17;
  TravelSegmentType.TravelSegmentTypeEnum travel_segment_type = 18;
  // applicable to egress and transfers on transit
  TransitRoute previous_transit_route = 19;
  // applicable to access and transfer on transit
  TransitRoute next_transit_route = 20;
  string activity_id = 21;
}

// The type of a TravelSegment that identifies if a segment is a part of activity by the same primary mode
// of travel or an intermediate one (access/egress/transfer)
message TravelSegmentType {
  enum TravelSegmentTypeEnum {
    UNKNOWN_SEGMENT_TYPE = 0;
    PRIMARY_MODE_SEGMENT = 1;
    ACCESS = 2;
    EGRESS = 3;
    TRANSFER = 4;
  }
}

// Ranked choice of travel activity. 0 is unknown, 1 is the chosen activity,
// and all others are alternatives.
message OptionIndex {
  enum OptionIndexEnum {
    UNKNOWN_OPTION = 0;
    FIRST_OPTION = 1;
    SECOND_OPTION = 2;
    THIRD_OPTION = 3;
    LAST_OPTION = 100;
  }
}

message VehicleType {
  enum VehicleTypeEnum {
    UNKNOWN_VEHICLE_TYPE = 0;
    LIGHT_COMMERCIAL = 1; // GVWR <14,000 lbs
    MEDIUM_COMMERCIAL = 2; // GVWR 14,000-26,000 lbs
    HEAVY_COMMERCIAL = 3; // GVWR >26,000 lbs
    PASSENGER_CAR = 4;
    SCHOOL_BUS = 5;
    URBAN_BUS = 6;
    OTHER_BUS = 7;
    MOTOR_HOME = 8;
    MOTORCYCLE = 9;
  }
}

message VehicleFuelType {
  enum VehicleFuelTypeEnum {
    UNKNOWN_FUEL_TYPE = 0;
    GASOLINE = 1;
    DIESEL = 2;
    ELECTRIC = 3;
    NATURAL_GAS = 4;
    HYDROGEN = 5;
  }
}

message VehicleFuelTechnology {
  enum VehicleFuelTechnologyEnum {
    UNKNOWN_FUEL_TECHNOLOGY = 0;
    ICE = 1; // Internal Combustion Engine
    BEV = 2; // Battery Electric Vehicle
    FCV = 3; // Fuel Cell Vehicle
    PHEV = 4; // Plug-in Hybrid Electric Vehicle
  }
}

message Vehicle {
  string id = 1;
  VehicleType.VehicleTypeEnum type = 2;
  repeated Itinerary itinerary = 3; // if not empty, the vehicle is forced to self-drive the itinerary
  VehicleFuelType.VehicleFuelTypeEnum fuel_type = 4;
  VehicleFuelTechnology.VehicleFuelTechnologyEnum fuel_technology = 5;
}


// when used as repeated, the consistency of origin, destination and departure times sequence is assumed
message Itinerary {
  Place origin = 1;
  Place destination = 2;
  map_types.TimeOfDay departure_time = 3;
  ActivityType.ActivityTypeEnum travel_purpose = 4;
}
