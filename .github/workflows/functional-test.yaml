name: Functional Test
# This test does the following:
# * Builds the "server" docker image that is used by the model repo
# * Runs functional tests
# * If tests pass, updates git and docker tags
# The workflow is configured to run on merges to original-direction, after unit tests pass.
# It can also be run manually, in which case it will NOT execute the steps to update git and docker tags
on:
  workflow_run:
    workflows: ["CI"]
    branches: ["original-direction"]
    types:
      - completed
  workflow_dispatch:

jobs:
  dump-context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
  functional-tests:
    name: "Build server image and run functional tests"
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: model-159019
    steps:

      # ---------------------
      # Common steps that we repeat between workflows.
      # I couldn't find an equivalent of CircleCI's templates; can we consolidate by turning this into an action?
      - name: Code Checkout
        uses: actions/checkout@v2

      - name: Sub modules checkout
        env:
          SSH_KEY_FOR_SUBMODULE: ${{secrets.SUBMODULE_GITHUB_KEY}}
        #the step below set the ssh key for the run
        run: |
          mkdir -p /home/runner/.ssh && touch /home/runner/.ssh/id_rsa && echo "$SSH_KEY_FOR_SUBMODULE" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa &&  git submodule sync && git submodule --quiet update --init && echo `git rev-parse --short=8 HEAD ` > TAG.txt

      - name: Login to GCP
        # Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          version: "297.0.1" # Fix https://github.com/google-github-actions/setup-gcloud/issues/128
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      - run: |-
          echo "GOOGLE_CREDENTIALS_FILE=$(basename $GOOGLE_APPLICATION_CREDENTIALS)" >> $GITHUB_ENV

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-graphhopper-buildx-${{ github.sha}}
          restore-keys: |
            ${{ runner.os }}-graphhopper-buildx
      # ---------------------

      - name: build the server
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile.server
          tags: "us.gcr.io/model-159019/gh:${{ github.sha }}-server-dev"
          build-args: |
            BASE_IMAGE=us.gcr.io/model-159019/gh:${{ github.sha }}-dev

      - name: Install golang
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.6'

      - name: Install grpcurl
        run: |
          go get github.com/fullstorydev/grpcurl/...
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
          grpcurl -version

      - name: run functional test
        run:  bash functional_test.sh ${{ github.sha }}-server-dev

  update-tags:
    runs-on: ubuntu-latest
    needs: functional-tests
    if: github.ref == 'refs/heads/original-direction' && github.event.workflow_run.conclusion == 'success'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Compute new tag
      id: compute_new_tag
      run: |
        current_tag=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' |  grep -E '^v[0-9]+$' | cut -c 2- | head -n1)
        new_tag="v$(echo "$current_tag+1" | bc)"
        echo ::set-output name=tag::$new_tag
    - name: Push git tag
      run: |
        git config user.name "Replica Robots"
        git config user.email "robots@replicahq.com"
        git tag "${{ steps.compute_new_tag.outputs.tag }}"
        git push origin "${{ steps.compute_new_tag.outputs.tag }}"
    - name: Login to GCP
      # Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        version: "297.0.1" # Fix https://github.com/google-github-actions/setup-gcloud/issues/128
    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GOOGLE_CREDENTIALS }}
    - name: Update docker tags
      run: |
        docker pull us.gcr.io/model-159019/gh:${{ github.sha }}-server-dev
        docker tag us.gcr.io/model-159019/gh:${{ github.sha }}-server-dev us.gcr.io/model-159019/gh:${{ steps.compute_new_tag.outputs.tag }}
        docker push us.gcr.io/model-159019/gh:${{ steps.compute_new_tag.outputs.tag }}

