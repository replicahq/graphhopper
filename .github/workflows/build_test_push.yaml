name: CI
on: [push]
jobs:
  build:
    name: build test and push Graphhoper images
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: model-159019
    steps:

      - name: Code Checkout
        uses: actions/checkout@v2

      - name: Sub modules checkout
        env:
          SSH_KEY_FOR_SUBMODULE: ${{secrets.SUBMODULE_GITHUB_KEY}}
        #the step below set the ssh key for the run
        run: |
          mkdir -p /home/runner/.ssh && touch /home/runner/.ssh/id_rsa && echo "$SSH_KEY_FOR_SUBMODULE" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa &&  git submodule sync && git submodule --quiet update --init && echo `git rev-parse --short=8 HEAD ` > TAG.txt

      - name: Login to GCP
        # Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          version: "297.0.1" # Fix https://github.com/google-github-actions/setup-gcloud/issues/128
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-graphhopper-buildx-${{ github.sha}}
          restore-keys: |
            ${{ runner.os }}-graphhopper-buildx

        # Build image for unit tests
      - name: Build test image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile.build
          tags: "us.gcr.io/model-159019/gh:${{ github.sha }}-dev"
          build-args: |
            GRAPHHOPPER_TOKEN=${{ secrets.GRAPHHOPPER_TOKEN}}
            GIT_PERSONAL_ACCESS=${{ secrets.GIT_PERSONAL_ACCESS }}
            GIT_USER_ID=${{ secrets.GIT_USER_ID }}

      - name: Download + setup micro norcal test files
        run: |
          export MININORCAL_OSM_PATH=${{ secrets.MININORCAL_OSM_PATH}}
          export MININORCAL_GTFS_PATH=${{ secrets.MININORCAL_GTFS_PATH}}
          ./setup_tests.sh

      # see https://github.com/docker/compose/issues/5696 for info on COMPOSE_INTERACTIVE_NO_CLI env var
      - name: run unit tests
        run: |
          export COMPOSE_INTERACTIVE_NO_CLI=1
          echo hi1
          docker run -t -d --name testrunner us.gcr.io/model-159019/gh:${{ github.sha }}-dev /bin/bash
          echo hi2
          docker exec -i testrunner /bin/bash -c "mkdir -p ./web/test-data/gtfs"
          echo hi3
          docker cp test_gh_config.yaml testrunner:/graphhopper
          echo hi4
          docker cp web/test-data/micro_nor_cal.osm.pbf testrunner:/graphhopper/web/test-data/micro_nor_cal.osm.pbf
          echo hi5
          for f in web/test-data/gtfs/*; do docker cp $f testrunner:/graphhopper/$f; done
          echo hi6
          docker exec -i testrunner /bin/bash -c "mvn test"
          echo hi7

      - name: build the server
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile.server
          tags: "us.gcr.io/model-159019/gh:${{ github.sha }}-server-dev"
          build-args: |
            BASE_IMAGE=us.gcr.io/model-159019/gh:${{ github.sha }}-dev

      - name: Install golang
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.6'

      - name: Install grpcurl
        run: |
          go get github.com/fullstorydev/grpcurl/...
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
          grpcurl -version

      - name: run functional test
        run:  bash functional_test.sh ${{ github.sha }}-server-dev
